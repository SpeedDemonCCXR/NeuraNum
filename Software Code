import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import messagebox
import random
import string
import pyperclip
import numexpr as nu

class NeuraNumModern:
    def __init__(self):
        self.style = tb.Style("solar")
        self.root = self.style.master
        self.root.title("NeuraNum")
        self.root.geometry("500x500") 

        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

        # üî∑ Primary Notebook (row 0)
        self.notebook = tb.Notebook(self.root, bootstyle="secondary") # Options: primary, secondary, success, info, warning, danger, light, dark
        self.notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        self.setup_password_tab()
        self.setup_calculator_tab()
        self.setup_guessing_game_tab()
        self.rps()

    def setup_password_tab(self):
        self.pwgen = tb.Frame(self.notebook)
        self.notebook.add(self.pwgen, text="üîê Password Generator")

        tb.Label(self.pwgen, text="Desired Password Length:", bootstyle="secondary").pack(pady=10)
        self.pwlen = tb.Entry(self.pwgen, width=15)
        self.pwlen.pack()

        tb.Button(self.pwgen, text="Generate Password", command=self.pwgeneration, bootstyle="success").pack(pady=10)
        self.pwout = tb.Text(self.pwgen, height=4, width=45)
        self.pwout.pack()

        tb.Button(self.pwgen, text="Copy to Clipboard", command=self.copypw, bootstyle="info").pack(pady=10)

    def pwgeneration(self):
        try:
            length = int(self.pwlen.get())
            password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(length))
            self.pwout.delete("1.0", "end")
            self.pwout.insert("end", password)
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number for password length.")

    def copypw(self):
        password = self.pwout.get("1.0", "end-1c")
        pyperclip.copy(password)

    def setup_calculator_tab(self):
        self.calc = tb.Frame(self.notebook)
        self.notebook.add(self.calc, text="üßÆ Calculator")

        tb.Label(self.calc, text="Enter your equation:", bootstyle="warning").pack(pady=10)
        self.calceq = tb.Entry(self.calc, width=30)
        self.calceq.pack()

        tb.Button(self.calc, text="Calculate", command=self.calcsolution, bootstyle="light").pack(pady=10)
        self.calcout = tb.Text(self.calc, height=3, width=40)
        self.calcout.pack()

    def calcsolution(self):
        try:
            equation = self.calceq.get()
            result = nu.evaluate(equation)
            self.calcout.delete("1.0", "end")
            self.calcout.insert("end", str(result))
        except Exception as e:
            messagebox.showerror("Error", f"Invalid equation: {e}")

    def setup_guessing_game_tab(self):
        self.numg = tb.Frame(self.notebook)
        self.notebook.add(self.numg, text="üéØ Number Guessing")

        self.numtoguess = random.randint(1, 100)
        self.guesses = 0
        self.maxattempts = 10

        tb.Label(self.numg, text="Guess a number between 1 and 100:", bootstyle="primary").pack(pady=10)
        self.guessentry = tb.Entry(self.numg)
        self.guessentry.pack()

        tb.Button(self.numg, text="Submit", command=self.guesscheck, bootstyle="secondary").pack(pady=10)
        self.guessesleft_label = tb.Label(self.numg, text=f"Guesses left: {self.maxattempts}", bootstyle="success")
        self.guessesleft_label.pack(pady=10)

    def guesscheck(self):
        try:
            guess = int(self.guessentry.get())
            if guess < 1 or guess > 100:
                messagebox.showerror("Error", "Please enter a number between 1 and 100.")
                return

            self.guesses += 1

            if guess == self.numtoguess:
                messagebox.showinfo("You win!", f"You guessed {self.numtoguess} in {self.guesses} attempts!")
                self.reset_game()
            else:
                hint = "Too low!" if guess < self.numtoguess else "Too high!"
                messagebox.showinfo("Hint", hint)
                if self.guesses >= self.maxattempts:
                    messagebox.showinfo("Game Over", f"Out of attempts. The number was {self.numtoguess}.")
                    self.reset_game()

            self.guessesleft_label.config(text=f"Guesses left: {self.maxattempts - self.guesses}")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number.")

    def reset_game(self):
        self.numtoguess = random.randint(1, 100)
        self.guesses = 0
        self.guessentry.delete(0, "end")
        self.guessesleft_label.config(text=f"Guesses left: {self.maxattempts}")

    def rps(self):
        self.rpps = tb.Frame(self.notebook)
        self.notebook.add(self.rpps, text="ü™® Rock Paper Scissors")

        tb.Label(self.rpps, text="Rock, Paper or Scissors?", bootstyle="success").pack(pady=10)
        self.rpsentry = tb.Entry(self.rpps, width=15, bootstyle="warning")
        self.rpsentry.pack()

        submitgbtn = tb.Button(self.rpps, text="Submit", command=self.playrps, bootstyle="secondary")
        submitgbtn.pack(pady=10)

    def playrps(self):
        user_choice = self.rpsentry.get()
        choices = ['Rock', 'Paper', 'Scissors']
        compchoice = random.choice(choices)
        if user_choice not in choices:
            messagebox.showerror("Error", "Please enter either 'Rock', 'Paper' or 'Scissors'")
            return

        self.userchose = tb.Label(self.rpps, text=f"You chose {user_choice}", bootstyle="success")
        self.userchose.place(relx=0.5, rely=0.5, anchor=tb.CENTER)
        self.compchose = tb.Label(self.rpps, text=f"Computer chose {compchoice}", bootstyle="success")
        self.compchose.place(relx=0.5, rely=0.6, anchor=tb.CENTER)
        if user_choice == compchoice:
            messagebox.showinfo("Tie", "It's a tie!")
            return
        
        elif user_choice == 'Rock':
            if compchoice == 'Scissors':
                messagebox.showinfo("You win!", "You win! Rock smashes Scissors!")
                
            else:
                messagebox.showinfo("You lose!", "You lose! Paper covers Rock!")
                

        elif user_choice == 'Paper':
            if compchoice == 'Rock':
                messagebox.showinfo("You win!", "You win! Paper covers Rock!")
                
            else:
                messagebox.showinfo("You lose!", "You lose! Scissors cuts Paper!")
                

        elif user_choice == 'Scissors':
            if compchoice == 'Paper':
                messagebox.showinfo("You win!", "You win! Scissors cuts Paper!")
                
            else:
                messagebox.showinfo("You lose!", "You lose! Rock crushes Scissors!")
                
        
        self.reset_rps()

    def reset_rps(self):
            self.rpsentry.delete(0, tb.END)
            self.userchose.config(text="")
            self.compchose.config(text="")

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = NeuraNumModern()
    app.run()
